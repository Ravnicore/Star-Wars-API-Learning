{"version":3,"sources":["Components/SearchBoxPeople.js","Components/CardPeople.js","Components/CardPeopleList.js","Containers/App.js","serviceWorker.js","index.js"],"names":["SearchBoxPeople","_ref","searchPeopleField","searchPeopleChange","react_default","a","createElement","className","type","placeholder","onChange","CardPeople","name","gender","alt","src","width","CardPeopleList","people","map","person","i","Components_CardPeople","key","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchPeopleChange","event","setState","searchFieldPeople","target","value","state","numberOfPeople","fetch","response","json","peopleParent","status","Error","count","console","log","peopleArray","slice","counterPeople","concat","peopleChild","_context","t0","_this$state","filteredPeople","filter","toLowerCase","includes","Components_SearchBoxPeople","Components_CardPeopleList","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_Containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.996963c8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SearchBoxPeople = ({searchPeopleField, searchPeopleChange}) => {\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n\t\t\t<input \r\n\t\t\tclassName = 'pa3 ba b--green bg-lightest-blue'\r\n\t\t\ttype='search' \r\n\t\t\tplaceholder='Search People Names'\r\n\t\t\tonChange={searchPeopleChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\n\r\nexport default SearchBoxPeople;","import React from 'react';\r\nimport Popup from \"reactjs-popup\";\r\n\r\nconst CardPeople = ({ name, gender }) => {\r\n\treturn (\r\n\t\t<div className='tc black bg-light-yellow dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt='people' src={`http://2.bp.blogspot.com/-HzFJhEY3KtU/Tea7Ku92cpI/AAAAAAAAALw/uBMzwdFi_kA/s1600/1.jpg`} width=\"50%\" />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>Gender: {gender}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport\tdefault CardPeople;\r\n\t\t\t//<img alt='people' src={`https://swapi.co/api/people/1?size=200x200`} />","import React from 'react';\r\nimport CardPeople from './CardPeople';\r\n\r\nconst CardPeopleList = ({ people }) =>{\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\tpeople.map((person, i) =>{\t\r\n\t\t\t\treturn(\r\n\t\t\t\t\t<CardPeople\r\n\t\t\t\t\tkey={i}\r\n\t\t\t\t\tname={people[i].name} \r\n\t\t\t\t\tgender={people[i].gender}\r\n\t\t\t\t\t/>\r\n\t\t\t\t);\r\n\t\t\t})\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardPeopleList;","import React from 'react';\nimport SearchBoxPeople from '../Components/SearchBoxPeople';\n//import CardPeople from '../Components/CardPeople';\nimport CardPeopleList from '../Components/CardPeopleList';\nimport './App.css';\nimport '../Components/Header'\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      people: [],\n      searchFieldPeople: '',\n      person: '',\n      numberOfPeople: ''\n    }\n  }\n\n  async componentDidMount() {\n       try {\n        const response = await fetch('https://swapi.co/api/people/?format=json');\n        const peopleParent = await response.json();\n        if(response.status !==200){\n          throw new Error(\"Not 200 response from fetch request. \")\n        } else {\n          this.setState({numberOfPeople: peopleParent.count})\n          console.log(this.state.numberOfPeople);          \n        }\n\n        let peopleArray = this.state.people.slice();\n        let counterPeople = 0; //This is used in case one fetch does not work in the array\n        for (let i=1; i<this.state.numberOfPeople; i++){\n          counterPeople++; //always add one here. start at 0 and we like starting our counter at 1\n          const response = await fetch(`https://swapi.co/api/people/${i}/?format=json`);\n          const peopleChild = await response.json();\n          if(response.status !==200){\n            counterPeople--; //subtract 1 since add one everytime and this element does not fetch exist\n          } else {\n            peopleArray[counterPeople] = peopleChild;\n          }\n        }\n        this.setState({people: peopleArray});\n        console.log(this.state.people);\n       }catch (err){\n         console.log('Could not find star wars people list: ', err);\n       }\n  }\n\n   onSearchPeopleChange = (event) =>{\n     this.setState({ searchFieldPeople: event.target.value })\n   }\n\n  render() {\n    const { people, searchFieldPeople } = this.state;\n    const filteredPeople = people.filter(person=>{\n      return person.name.toLowerCase().includes(searchFieldPeople.toLowerCase());\n    })\n    return (\n      <div className=\"flex flex-column App\">\n        <div className='flex flex-row justify-center'>\n          <h1 className='SW1'>STAR WARS</h1>\n        </div>\n        <div className='flex flex-row justify-around filterAndCards'>\n          <div className='flex flex-column w-20'>\n            <div className='flex flex-row outline'>\n              <h2 className=\"sectionTitles\">Filter Area</h2>\n            </div>\n            <div className='flex flex-row'>\n              <h3>Name</h3>\n              <SearchBoxPeople searchPeopleChange={this.onSearchPeopleChange}/>\n            </div>\n          </div>\n          <div className='flex flex-column w-70'>\n            <div className='flex flex-row outline'>\n              <h2 className=\"sectionTitles w-100\">Cards Area</h2>\n            </div>\n            <div className='flex flex-row'>\n              <div className='fullCardList w-100'>\n                <CardPeopleList  people={ filteredPeople } />\n              </div>\n            </div>\n          </div>  \n        </div>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}